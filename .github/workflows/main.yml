# This is a basic workflow to help you get started with Actions

name: fiap-producao-ms

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  TF_ACTION_WORKING_DIR: "infra"

jobs:
  sonarqube:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4
        with:
          # Disabling shallow clones is recommended for improving the relevancy of reporting
          fetch-depth: 0
      - name: Install dependencies
        run: yarn
      - name: Test and coverage
        run: yarn jest --coverage
      - name: ls
        run: ls
      - name: SonarQube Scan
        with:
          args: >
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.verbose=true
            -Dsonar.projectKey=fiap-producao-ms
            -Dsonar.sources=src
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          
      # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


  BDD:
    runs-on: ubuntu-latest
    needs: sonarqube
    steps:
    - uses: actions/checkout@v4
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0

    - name: Install dependencies
      run: yarn
                  
    - name: Test with cugit cumber
      run: yarn cucumber
  
  serverless:
    runs-on: ubuntu-latest
    needs: BDD
    steps:
    - uses: actions/checkout@v4
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0

    - name: Install nest
      run: npm i -g @nestjs/cli
    - name: Install dependencies 
      run: yarn install
    - name: Build
      run: yarn build

    - name: serverless deploy
      uses: serverless/github-action@v3.2
      with:
        args: deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
